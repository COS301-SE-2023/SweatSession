"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["default-node_modules_ngxs_form-plugin_fesm2015_ngxs-form-plugin_js"],{

/***/ 35579:
/*!*********************************************************************!*\
  !*** ./node_modules/@ngxs/form-plugin/fesm2015/ngxs-form-plugin.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NgxsFormPlugin": () => (/* binding */ NgxsFormPlugin),
/* harmony export */   "NgxsFormPluginModule": () => (/* binding */ NgxsFormPluginModule),
/* harmony export */   "ResetForm": () => (/* binding */ ResetForm),
/* harmony export */   "SetFormDirty": () => (/* binding */ SetFormDirty),
/* harmony export */   "SetFormDisabled": () => (/* binding */ SetFormDisabled),
/* harmony export */   "SetFormEnabled": () => (/* binding */ SetFormEnabled),
/* harmony export */   "SetFormPristine": () => (/* binding */ SetFormPristine),
/* harmony export */   "UpdateForm": () => (/* binding */ UpdateForm),
/* harmony export */   "UpdateFormDirty": () => (/* binding */ UpdateFormDirty),
/* harmony export */   "UpdateFormErrors": () => (/* binding */ UpdateFormErrors),
/* harmony export */   "UpdateFormStatus": () => (/* binding */ UpdateFormStatus),
/* harmony export */   "UpdateFormValue": () => (/* binding */ UpdateFormValue),
/* harmony export */   "ɵFormDirective": () => (/* binding */ FormDirective)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 86839);
/* harmony import */ var _ngxs_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ngxs/store */ 39307);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ 69542);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 80228);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 60116);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 68951);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 98977);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ 71989);








class UpdateFormStatus {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Update Form Status';
  }
}
class UpdateFormValue {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Update Form Value';
  }
}
class UpdateForm {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Update Form';
  }
}
class UpdateFormDirty {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Update Form Dirty';
  }
}
class SetFormDirty {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Set Form Dirty';
  }
}
class SetFormPristine {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Set Form Pristine';
  }
}
class UpdateFormErrors {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Update Form Errors';
  }
}
class SetFormDisabled {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Set Form Disabled';
  }
}
class SetFormEnabled {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Set Form Enabled';
  }
}
class ResetForm {
  constructor(payload) {
    this.payload = payload;
  }
  static get type() {
    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
    return '[Forms] Reset Form';
  }
}
class NgxsFormPlugin {
  handle(state, event, next) {
    const type = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.getActionTypeFromInstance)(event);
    let nextState = state;
    if (type === UpdateFormValue.type || type === UpdateForm.type || type === ResetForm.type) {
      const {
        value
      } = event.payload;
      const payloadValue = Array.isArray(value) ? value.slice() : isObjectLike(value) ? Object.assign({}, value) : value;
      const path = this.joinPathWithPropertyPath(event);
      nextState = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.setValue)(nextState, path, payloadValue);
    }
    if (type === ResetForm.type) {
      const model = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.getValue)(nextState, `${event.payload.path}.model`);
      nextState = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.setValue)(nextState, `${event.payload.path}`, {
        model: model
      });
    }
    if (type === UpdateFormStatus.type || type === UpdateForm.type) {
      nextState = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.setValue)(nextState, `${event.payload.path}.status`, event.payload.status);
    }
    if (type === UpdateFormErrors.type || type === UpdateForm.type) {
      nextState = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.setValue)(nextState, `${event.payload.path}.errors`, Object.assign({}, event.payload.errors));
    }
    if (type === UpdateFormDirty.type || type === UpdateForm.type) {
      nextState = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.setValue)(nextState, `${event.payload.path}.dirty`, event.payload.dirty);
    }
    if (type === SetFormDirty.type) {
      nextState = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.setValue)(nextState, `${event.payload}.dirty`, true);
    }
    if (type === SetFormPristine.type) {
      nextState = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.setValue)(nextState, `${event.payload}.dirty`, false);
    }
    if (type === SetFormDisabled.type) {
      nextState = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.setValue)(nextState, `${event.payload}.disabled`, true);
    }
    if (type === SetFormEnabled.type) {
      nextState = (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.setValue)(nextState, `${event.payload}.disabled`, false);
    }
    return next(nextState, event);
  }
  joinPathWithPropertyPath({
    payload
  }) {
    let path = `${payload.path}.model`;
    if (payload.propertyPath) {
      path += `.${payload.propertyPath}`;
    }
    return path;
  }
}
/** @nocollapse */
NgxsFormPlugin.ɵfac = function NgxsFormPlugin_Factory(t) {
  return new (t || NgxsFormPlugin)();
};
/** @nocollapse */
NgxsFormPlugin.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: NgxsFormPlugin,
  factory: NgxsFormPlugin.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgxsFormPlugin, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], null, null);
})();
function isObjectLike(target) {
  return target !== null && typeof target === 'object';
}
class FormDirective {
  constructor(_actions$, _store, _formGroupDirective, _cd) {
    this._actions$ = _actions$;
    this._store = _store;
    this._formGroupDirective = _formGroupDirective;
    this._cd = _cd;
    this.path = null;
    this._debounce = 100;
    this._clearDestroy = false;
    this._updating = false;
    this._destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
  }
  set debounce(debounce) {
    this._debounce = Number(debounce);
  }
  get debounce() {
    return this._debounce;
  }
  set clearDestroy(val) {
    this._clearDestroy = val != null && `${val}` !== 'false';
  }
  get clearDestroy() {
    return this._clearDestroy;
  }
  ngOnInit() {
    this._actions$.pipe((0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.ofActionDispatched)(ResetForm), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)(action => action.payload.path === this.path), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.takeUntil)(this._destroy$)).subscribe(({
      payload: {
        value
      }
    }) => {
      this.form.reset(value);
      this.updateFormStateWithRawValue(true);
      this._cd.markForCheck();
    });
    this.getStateStream(`${this.path}.model`).subscribe(model => {
      if (this._updating || !model) {
        return;
      }
      this.form.patchValue(model);
      this._cd.markForCheck();
    });
    this.getStateStream(`${this.path}.dirty`).subscribe(dirty => {
      if (this.form.dirty === dirty || typeof dirty !== 'boolean') {
        return;
      }
      if (dirty) {
        this.form.markAsDirty();
      } else {
        this.form.markAsPristine();
      }
      this._cd.markForCheck();
    });
    // On first state change, sync form model, status and dirty with state
    this._store.selectOnce(state => (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.getValue)(state, this.path)).subscribe(() => {
      this._store.dispatch([new UpdateFormValue({
        path: this.path,
        value: this.form.getRawValue()
      }), new UpdateFormStatus({
        path: this.path,
        status: this.form.status
      }), new UpdateFormDirty({
        path: this.path,
        dirty: this.form.dirty
      })]);
    });
    this.getStateStream(`${this.path}.disabled`).subscribe(disabled => {
      if (this.form.disabled === disabled || typeof disabled !== 'boolean') {
        return;
      }
      if (disabled) {
        this.form.disable();
      } else {
        this.form.enable();
      }
      this._cd.markForCheck();
    });
    this._formGroupDirective.valueChanges.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.distinctUntilChanged)((a, b) => JSON.stringify(a) === JSON.stringify(b)), this.debounceChange()).subscribe(() => {
      this.updateFormStateWithRawValue();
    });
    this._formGroupDirective.statusChanges.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.distinctUntilChanged)(), this.debounceChange()).subscribe(status => {
      this._store.dispatch(new UpdateFormStatus({
        status,
        path: this.path
      }));
    });
  }
  updateFormStateWithRawValue(withFormStatus) {
    if (this._updating) return;
    const value = this._formGroupDirective.control.getRawValue();
    const actions = [new UpdateFormValue({
      path: this.path,
      value
    }), new UpdateFormDirty({
      path: this.path,
      dirty: this._formGroupDirective.dirty
    }), new UpdateFormErrors({
      path: this.path,
      errors: this._formGroupDirective.errors
    })];
    if (withFormStatus) {
      actions.push(new UpdateFormStatus({
        path: this.path,
        status: this._formGroupDirective.status
      }));
    }
    this._updating = true;
    this._store.dispatch(actions).subscribe({
      error: () => this._updating = false,
      complete: () => this._updating = false
    });
  }
  ngOnDestroy() {
    this._destroy$.next();
    if (this.clearDestroy) {
      this._store.dispatch(new UpdateForm({
        path: this.path,
        value: null,
        dirty: null,
        status: null,
        errors: null
      }));
    }
  }
  debounceChange() {
    const skipDebounceTime = this._formGroupDirective.control.updateOn !== 'change' || this._debounce < 0;
    return skipDebounceTime ? change => change.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.takeUntil)(this._destroy$)) : change => change.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.debounceTime)(this._debounce), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.takeUntil)(this._destroy$));
  }
  get form() {
    return this._formGroupDirective.form;
  }
  getStateStream(path) {
    return this._store.select(state => (0,_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.getValue)(state, path)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.takeUntil)(this._destroy$));
  }
}
/** @nocollapse */
FormDirective.ɵfac = function FormDirective_Factory(t) {
  return new (t || FormDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.Actions), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_ngxs_store__WEBPACK_IMPORTED_MODULE_0__.Store), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_7__.FormGroupDirective), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectorRef));
};
/** @nocollapse */
FormDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
  type: FormDirective,
  selectors: [["", "ngxsForm", ""]],
  inputs: {
    path: ["ngxsForm", "path"],
    debounce: ["ngxsFormDebounce", "debounce"],
    clearDestroy: ["ngxsFormClearOnDestroy", "clearDestroy"]
  }
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](FormDirective, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Directive,
    args: [{
      selector: '[ngxsForm]'
    }]
  }], function () {
    return [{
      type: _ngxs_store__WEBPACK_IMPORTED_MODULE_0__.Actions
    }, {
      type: _ngxs_store__WEBPACK_IMPORTED_MODULE_0__.Store
    }, {
      type: _angular_forms__WEBPACK_IMPORTED_MODULE_7__.FormGroupDirective
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.ChangeDetectorRef
    }];
  }, {
    path: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['ngxsForm']
    }],
    debounce: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['ngxsFormDebounce']
    }],
    clearDestroy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Input,
      args: ['ngxsFormClearOnDestroy']
    }]
  });
})();
class NgxsFormPluginModule {
  static forRoot() {
    return {
      ngModule: NgxsFormPluginModule,
      providers: [{
        provide: _ngxs_store__WEBPACK_IMPORTED_MODULE_0__.NGXS_PLUGINS,
        useClass: NgxsFormPlugin,
        multi: true
      }]
    };
  }
}
/** @nocollapse */
NgxsFormPluginModule.ɵfac = function NgxsFormPluginModule_Factory(t) {
  return new (t || NgxsFormPluginModule)();
};
/** @nocollapse */
NgxsFormPluginModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: NgxsFormPluginModule
});
/** @nocollapse */
NgxsFormPluginModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
  imports: [[_angular_forms__WEBPACK_IMPORTED_MODULE_7__.ReactiveFormsModule]]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NgxsFormPluginModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{
      imports: [_angular_forms__WEBPACK_IMPORTED_MODULE_7__.ReactiveFormsModule],
      declarations: [FormDirective],
      exports: [FormDirective]
    }]
  }], null, null);
})();

/**
 * The public api for consumers of @ngxs/form-plugin
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ })

}]);
//# sourceMappingURL=default-node_modules_ngxs_form-plugin_fesm2015_ngxs-form-plugin_js.js.map