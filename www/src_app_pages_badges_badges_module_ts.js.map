{"version":3,"file":"src_app_pages_badges_badges_module_ts.js","mappings":"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","sources":["./src/app/actions/badges.actions.ts","./src/app/directives/backbutton.directive.ts","./src/app/directives/backbutton.module.ts","./src/app/directives/index.ts","./src/app/pages/badges/badge/badge.component.ts","./src/app/pages/badges/badge/badge.component.html","./src/app/pages/badges/badges-routing.module.ts","./src/app/pages/badges/badges.module.ts","./src/app/pages/badges/badges.page.ts","./src/app/pages/badges/badges.page.html","./src/app/states/badges/badges.api.ts","./src/app/states/badges/badges.module.ts","./src/app/states/badges/badges.state.ts","./src/app/states/badges/index.ts"],"sourcesContent":["import { IBadges } from \"../models/badges.model\";\n\nexport class SubscribeToBadges {\n    static readonly type = '[Badges] SubscribeToBadges';\n    // constructor(){alert(\"IN SubscribeToBadges\");}\n}\n\nexport class SetBadges {\n    static readonly type = '[Badges] SetBadges';\n    constructor(public readonly badges: IBadges | null | undefined) { }\n}","import { Directive, HostListener } from \"@angular/core\";\nimport { NavigationService } from \"../services\";\n \n@Directive({\n  selector: \"[backButton]\",\n})\nexport class BackButtonDirective {\n  constructor(private navigation: NavigationService) {}\n \n  @HostListener(\"click\")\n  onClick(): void {\n    this.navigation.back();\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BackButtonDirective } from './backbutton.directive';\nimport { IonicModule } from '@ionic/angular';\nimport { BackbuttonComponent } from './backbutton/backbutton.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n  ],\n  declarations: [BackbuttonComponent],\n  exports: [BackbuttonComponent]\n})\nexport class BackButtonDirectiveModule {}\n","export * from \"./backbutton.directive\";\nexport * from \"./backbutton.module\";","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'badge',\n  templateUrl: './badge.component.html',\n  styleUrls: ['./badge.component.scss'],\n})\nexport class BadgeComponent  implements OnInit {\n  @Input() name!:string;\n  @Input() receivedDescription!:string;\n  @Input() notReceivedDescription!:string;\n  @Input() received!:boolean;\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","<ion-card class=\"badge\" [ngClass]=\"{'received': received, 'not-received': !received}\">\n  <ion-item>\n    <ion-grid>\n      <ion-row>\n        <ion-col size=\"auto\">\n          <ion-img src=\"assets/badge0.png\"></ion-img>\n        </ion-col>\n        <ion-col class=\"content\">\n          <div class=\"badgeHeader\">{{name}}</div>\n          <div class=\"badgeDescription\">{{ received ? receivedDescription : notReceivedDescription }}</div>\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n  </ion-item>\n</ion-card>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BadgesPage } from './badges.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BadgesPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BadgesPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { BadgesPageRoutingModule } from './badges-routing.module';\nimport { BadgesModule as BadgesStatesModule } from 'src/app/states/badges';\nimport { BadgesPage } from './badges.page';\nimport { BadgeComponent } from './badge/badge.component';\nimport { BadgesApi } from 'src/app/states/badges/badges.api';\nimport { AuthApi } from 'src/app/states/auth/auth.api';\nimport { BackButtonDirectiveModule } from 'src/app/directives';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    BadgesPageRoutingModule,\n    BadgesStatesModule,\n    BackButtonDirectiveModule\n  ],\n  declarations: [BadgesPage, BadgeComponent],\n  providers: [BadgesApi, AuthApi]\n})\nexport class BadgesPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { map, Observable, of } from 'rxjs';\nimport { IBadges } from 'src/app/models/badges.model';\nimport { AuthApi } from 'src/app/states/auth/auth.api';\n// import { BadgesApi } from 'src/app/states/badges/badges.api';\nimport { BadgesService } from 'src/app/services/badges/badges.service';\nimport { SubscribeToBadges } from 'src/app/actions/badges.actions';\nimport { Select, Store } from '@ngxs/store';\nimport { BadgesState } from 'src/app/states/badges/badges.state';\n\n@Component({\n  selector: 'app-badges',\n  templateUrl: './badges.page.html',\n  styleUrls: ['./badges.page.scss'],\n})\nexport class BadgesPage implements OnInit {\n\n  @Select(BadgesState.currBadges)\n  receivedBadges$!: Observable<IBadges | null>;\n\n  badges=[{\n      header:\"Starter's Success\",\n      receivedDescription:\"Congratulations! You have completed your first workout plan\",\n      notReceivedDescription:\"Complete a workout plan to earn this badge\",\n      received:false\n    },{\n      header:\"Socialite\",\n      receivedDescription:\"Congratulations! You have made 5 workout partners\",\n      notReceivedDescription:\"Make 5 friends to earn this badge\",\n      received:false\n    },{\n      header: \"Stretching Star\",\n      receivedDescription: \"Congratulations! You have incorporated stretching exercises into your workout plan\",\n      notReceivedDescription: \"Incorporate stretching exercises into your workout plan\",\n      received: false\n    },{\n      header:\"Record Breaker\",\n      receivedDescription:\"Congratulations! You have reached a new personal best for bench presses\",\n      notReceivedDescription:\"Reach a new personal best for bench presses to earn this badge\",\n      received:false\n    },{\n      header:\"Workout Warrior\",\n      receivedDescription:\"Congratulations! You have attended 20 workout sessions\",\n      notReceivedDescription:\"Attend 20 workout sessions to earn this badge\",\n      received:false\n    },{\n      header:\"Dynamic Duo\",\n      receivedDescription:\"Congratulations! You have completed 50 workout sessions with a friend\",\n      notReceivedDescription:\"Complete 50 workout sessions with a friend to earn this badge\",\n      received:false\n    },{\n      header:\"Push-Up Pro\",\n      receivedDescription:\"Congratulations! You did 100 push-ups in a day\",\n      notReceivedDescription:\"Do 100 push-ups in a day to earn this badge\",\n      received:false\n    },{\n      header:\"Active Adventurer\",\n      receivedDescription:\"Congratulations! You did a workout session at 5 gyms\",\n      notReceivedDescription:\"Do a workout session at 5 gyms to earn this badge\",\n      received:false\n    }\n  ];\n  constructor(\n    // private badgesApi: BadgesApi,\n    private authApi: AuthApi,\n    private badgesService: BadgesService,\n    private store: Store\n  ) {}\n\n  ngOnInit() {\n    this.store.dispatch(new SubscribeToBadges());\n    this.receivedBadges$.pipe(\n      // Use the map operator to transform the observable value\n      map((badges: IBadges | null) => {\n        if (badges) {\n          return badges.receivedBadges;\n        } else {\n          return []; // Return an empty array if badges is null\n        }\n      })\n    ).subscribe((receivedBadges: Number[]) => {\n      // Iterate through the receivedBadges array\n      receivedBadges.forEach((badgeNumber: Number) => {\n        this.badges[badgeNumber.valueOf()].received=true;\n        console.log(badgeNumber);\n        // Perform any other operations with each badge number\n      });\n    });\n  }\n}\n","<ion-header [translucent]=\"true\">\n  <ion-item style=\"display: flex; align-items: center;\">\n    <backbutton></backbutton>\n    <ion-title style=\"margin-left: 1rem;\">Badges</ion-title>\n  </ion-item>\n</ion-header>\n\n<ion-content class=\"badgesContainer\">\n  <ion-grid class=\"loginGrid\">\n    <badge *ngFor =\"let badge of badges\" \n    [name] = \"badge.header\"\n    [receivedDescription] = \"badge.receivedDescription\"\n    [notReceivedDescription] = \"badge.notReceivedDescription\"\n    [received] = \"badge.received\"\n  ></badge>\n  </ion-grid>\n</ion-content>","import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { doc, docData, Firestore } from '@angular/fire/firestore';\nimport { IBadges } from 'src/app/models/badges.model';\nimport { BadgesRepository } from 'src/app/repository/badges.repository'\n\nimport { NavController } from '@ionic/angular';\nimport { AuthApi } from '../auth/auth.api';\nimport { getAuth } from '@angular/fire/auth';\n// import { AuthState } from 'src/app/states/auth';\n\n@Injectable()\nexport class BadgesApi {\n  currUserId: string | undefined | null;\n  constructor(private Nav: NavController, private firestore: Firestore, private authApi: AuthApi) {}//, private readonly authObject: Auth, \n\n  badges$() {\n    // const id = this.authApi.getCurrentUserId();\n    const auth = getAuth();\n    this.currUserId = auth.currentUser?.uid;\n    if (this.currUserId!=undefined){\n      sessionStorage.setItem('currUserId', this.currUserId);\n    }else{\n      this.currUserId = sessionStorage.getItem('currUserId');\n    }\n    // alert(AuthState.currUserId);\n    // alert(\"IN badges.api.ts\");\n    // alert(currUserId);\n    const docRef = doc(\n      this.firestore,\n      `badges/${this.currUserId}`\n    ).withConverter<IBadges>({       //convert our firestore data into the IBadges type\n      fromFirestore: (snapshot) => {\n        return (snapshot.data() as IBadges);\n      },\n      toFirestore: (it: IBadges) => it,\n    });\n    return docData(docRef, { idField: 'id' });\n  }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\n// import { AuthState } from './auth.state';\nimport { BadgesApi } from './badges.api';\nimport { BadgesState } from './badges.state';\n//import { BadgesService } from 'src/app/services/badges/badges.service';\n// import { AuthApi } from '../auth/auth.api';\n\n\n@NgModule({\n  imports: [CommonModule, NgxsModule.forFeature([BadgesState])],//, NgxsModule.forFeature([AuthState])  //BadgesModule\n  providers: [BadgesApi]//BadgesService\n})\nexport class BadgesModule {}","import { Injectable } from '@angular/core';\nimport { User } from '@angular/fire/auth';\nimport { Action, Selector, State, StateContext, Store } from '@ngxs/store';\nimport { Navigate } from '@ngxs/router-plugin';\n\nimport { BadgesApi } from './badges.api';\n\nimport produce from 'immer';\nimport { Observable, tap } from 'rxjs';\nimport { IBadges } from 'src/app/models/badges.model';\nimport { SetBadges, SubscribeToBadges } from 'src/app/actions/badges.actions';\n\nexport interface BadgesStateModel {\n  //currUser: User | null;\n  currBadges: IBadges | null | undefined;\n}\n\n\n\n@State<BadgesStateModel>({\n  name: 'badges',\n  defaults: {\n    currBadges: null\n  }\n})\n@Injectable()\nexport class BadgesState {\n  constructor(private readonly badgesApi: BadgesApi, private readonly store: Store) { }\n\n  @Selector()\n  static receivedBadges(state: BadgesStateModel) {\n    return state.currBadges?.receivedBadges;\n  }\n\n  @Selector()\n  static currBadges(state: BadgesStateModel) {\n    return state.currBadges;\n  }\n\n  @Action(SubscribeToBadges)\n  public subscribeToBadgesState(context: StateContext<BadgesStateModel>) {\n    return this.badgesApi.badges$().pipe(\n      tap((currBadges: IBadges) => {\n        console.log(\"IN subscribeToBadges\");\n        console.log(currBadges);\n        context.dispatch(new SetBadges(currBadges));\n      })\n    );\n  }\n\n  @Action(SetBadges)\n  async setBadges(context: StateContext<BadgesStateModel>, { badges }: SetBadges) {\n    return context.setState(\n      produce((repr) => {\n        repr.currBadges = badges;\n      })\n    );\n  }\n}\n","export * from './badges.module';"],"names":["SubscribeToBadges","type","SetBadges","constructor","badges","BackButtonDirective","navigation","onClick","back","i0","ɵɵdirectiveInject","i1","NavigationService","selectors","hostBindings","BackButtonDirective_HostBindings","rf","ctx","CommonModule","FormsModule","IonicModule","BackbuttonComponent","BackButtonDirectiveModule","declarations","imports","exports","BadgeComponent","ngOnInit","inputs","name","receivedDescription","notReceivedDescription","received","decls","vars","consts","template","BadgeComponent_Template","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵpureFunction2","_c0","ɵɵadvance","ɵɵtextInterpolate","RouterModule","BadgesPage","routes","path","component","BadgesPageRoutingModule","forChild","BadgesModule","BadgesStatesModule","BadgesApi","AuthApi","BadgesPageModule","map","Select","BadgesState","badge_r1","header","authApi","badgesService","store","dispatch","receivedBadges$","pipe","receivedBadges","subscribe","forEach","badgeNumber","valueOf","console","log","i2","BadgesService","i3","Store","BadgesPage_Template","ɵɵtemplate","BadgesPage_badge_7_Template","__decorate","currBadges","doc","docData","getAuth","Nav","firestore","badges$","auth","currUserId","currentUser","uid","undefined","sessionStorage","setItem","getItem","docRef","withConverter","fromFirestore","snapshot","data","toFirestore","it","idField","ɵɵinject","NavController","Firestore","factory","ɵfac","NgxsModule","forFeature","ɵNgxsFeatureModule","Action","Selector","State","produce","tap","_class","badgesApi","state","subscribeToBadgesState","context","setBadges","_asyncToGenerator","setState","repr","defaults"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}