{"version":3,"file":"src_app_pages_otheruserbadges_other-user-badges_module_ts.js","mappings":"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","sources":["./src/app/actions/otheruserbadges.actions.ts","./src/app/pages/otheruserbadges/badge/badge.component.ts","./src/app/pages/otheruserbadges/badge/badge.component.html","./src/app/pages/otheruserbadges/other-user-badges-routing.module.ts","./src/app/pages/otheruserbadges/other-user-badges.module.ts","./src/app/pages/otheruserbadges/other-user-badges.page.ts","./src/app/pages/otheruserbadges/other-user-badges.page.html","./src/app/states/otheruserbadges/index.ts","./src/app/states/otheruserbadges/otheruserbadges.api.ts","./src/app/states/otheruserbadges/otheruserbadges.module.ts","./src/app/states/otheruserbadges/otheruserbadges.state.ts"],"sourcesContent":["import { IBadges } from \"../models/badges.model\";\n\nexport class SubscribeToOtherUserBadges {\n    static readonly type = '[OtherUserBadges] SubscribeToOtherUserBadges';\n    // constructor(){alert(\"IN SubscribeToBadges\");}\n}\n\nexport class SetOtherUserBadges {\n    static readonly type = '[OtherUserBadges] SetOtherUserBadges';\n    constructor(public readonly otherUserBadges: IBadges | null | undefined) { }\n}","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'badge',\n  templateUrl: './badge.component.html',\n  styleUrls: ['./badge.component.scss'],\n})\nexport class BadgeComponent  implements OnInit {\n  @Input() name!:string;\n  @Input() receivedDescription!:string;\n  @Input() notReceivedDescription!:string;\n  @Input() received!:boolean;\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","<ion-card class=\"badge\" [ngClass]=\"{'received': received, 'not-received': !received}\">\n  <ion-item>\n    <ion-grid>\n      <ion-row>\n        <ion-col size=\"auto\">\n          <ion-img src=\"assets/badge0.png\"></ion-img>\n        </ion-col>\n        <ion-col class=\"content\">\n          <div class=\"badgeHeader\">{{name}}</div>\n          <div class=\"badgeDescription\">{{ received ? receivedDescription : notReceivedDescription }}</div>\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n  </ion-item>\n</ion-card>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { OtherUserBadgesPage } from './other-user-badges.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OtherUserBadgesPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OtherUserBadgesPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { OtherUserBadgesPageRoutingModule } from './other-user-badges-routing.module';\n\nimport { OtherUserBadgesPage } from './other-user-badges.page';\nimport { BadgeComponent } from './badge/badge.component';\nimport { OtherUserBadgesModule as OtherUserBadgesStatesModule } from 'src/app/states/otheruserbadges';\nimport { OtherUserBadgesApi } from 'src/app/states/otheruserbadges/otheruserbadges.api';\nimport { AuthApi } from 'src/app/states/auth/auth.api';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    OtherUserBadgesPageRoutingModule,\n    OtherUserBadgesStatesModule\n  ],\n  declarations: [OtherUserBadgesPage, BadgeComponent],\n  providers: [OtherUserBadgesApi, AuthApi]\n})\nexport class OtherUserBadgesPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { map, Observable, of } from 'rxjs';\nimport { IBadges } from 'src/app/models/badges.model';\nimport { AuthApi } from 'src/app/states/auth/auth.api';\nimport { BadgesService } from 'src/app/services/badges/badges.service';\nimport { SubscribeToOtherUserBadges } from 'src/app/actions/otheruserbadges.actions';\nimport { Select, Store } from '@ngxs/store';\nimport { OtherUserBadgesState } from 'src/app/states/otheruserbadges/otheruserbadges.state';\n\n@Component({\n  selector: 'app-otherbadges',\n  templateUrl: './other-user-badges.page.html',\n  styleUrls: ['./other-user-badges.page.scss'],\n})\nexport class OtherUserBadgesPage implements OnInit {\n\n  @Select(OtherUserBadgesState.currBadges)\n  receivedBadges$!: Observable<IBadges | null>;\n\n  badges=[{\n      header:\"Starter's Success\",\n      receivedDescription:\"Congratulations! You have completed your first workout plan\",\n      notReceivedDescription:\"Complete a workout plan to earn this badge\",\n      received:false\n    },{\n      header:\"Socialite\",\n      receivedDescription:\"Congratulations! You have made 5 workout partners\",\n      notReceivedDescription:\"Make 5 friends to earn this badge\",\n      received:false\n    },{\n      header: \"Stretching Star\",\n      receivedDescription: \"Congratulations! You have incorporated stretching exercises into your workout plan\",\n      notReceivedDescription: \"Incorporate stretching exercises into your workout plan\",\n      received: false\n    },{\n      header:\"Record Breaker\",\n      receivedDescription:\"Congratulations! You have reached a new personal best for bench presses\",\n      notReceivedDescription:\"Reach a new personal best for bench presses to earn this badge\",\n      received:false\n    },{\n      header:\"Workout Warrior\",\n      receivedDescription:\"Congratulations! You have attended 20 workout sessions\",\n      notReceivedDescription:\"Attend 20 workout sessions to earn this badge\",\n      received:false\n    },{\n      header:\"Dynamic Duo\",\n      receivedDescription:\"Congratulations! You have completed 50 workout sessions with a friend\",\n      notReceivedDescription:\"Complete 50 workout sessions with a friend to earn this badge\",\n      received:false\n    },{\n      header:\"Push-Up Pro\",\n      receivedDescription:\"Congratulations! You did 100 push-ups in a day\",\n      notReceivedDescription:\"Do 100 push-ups in a day to earn this badge\",\n      received:false\n    },{\n      header:\"Active Adventurer\",\n      receivedDescription:\"Congratulations! You did a workout session at 5 gyms\",\n      notReceivedDescription:\"Do a workout session at 5 gyms to earn this badge\",\n      received:false\n    }\n  ];\n  constructor(\n    // private badgesApi: BadgesApi,\n    private authApi: AuthApi,\n    private badgesService: BadgesService,\n    private store: Store\n  ) {}\n\n  ngOnInit() {\n    this.store.dispatch(new SubscribeToOtherUserBadges());\n    this.receivedBadges$.pipe(\n      // Use the map operator to transform the observable value\n      map((badges: IBadges | null) => {\n        if (badges) {\n          return badges.receivedBadges;\n        } else {\n          return []; // Return an empty array if badges is null\n        }\n      })\n    ).subscribe((receivedBadges: Number[]) => {\n      // Iterate through the receivedBadges array\n      receivedBadges.forEach((badgeNumber: Number) => {\n        this.badges[badgeNumber.valueOf()].received=true;\n        console.log(badgeNumber);\n        // Perform any other operations with each badge number\n      });\n    });\n  }\n}\n","<ion-header [translucent]=\"true\">\n  <ion-item style=\"display: flex; align-items: center;\">\n    <ion-icon name=\"arrow-back-outline\" routerLink=\"/userprofile\" style=\"font-size: 2rem;\"></ion-icon>\n    <ion-title style=\"margin: 0 auto;\">J Badges</ion-title>\n    <!-- <ion-title style=\"margin: 0 auto;\">{{user!.name}}'s' Badges</ion-title> -->\n  </ion-item>\n</ion-header>\n\n<ion-content class=\"badgesContainer\">\n  <ion-grid class=\"loginGrid\">\n    <badge *ngFor =\"let badge of badges\" \n    [name] = \"badge.header\"\n    [receivedDescription] = \"badge.receivedDescription\"\n    [notReceivedDescription] = \"badge.notReceivedDescription\"\n    [received] = \"badge.received\"\n  ></badge>\n  </ion-grid>\n</ion-content>","export * from './otheruserbadges.module';","import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { doc, docData, Firestore } from '@angular/fire/firestore';\nimport { IBadges } from 'src/app/models/badges.model';\n// import { BadgesRepository } from 'src/app/repository/badges.repository'\n\nimport { NavController } from '@ionic/angular';\n@Injectable()\nexport class OtherUserBadgesApi {\n  currUserId: string | undefined | null;\n  constructor(private Nav: NavController, private firestore: Firestore) {}//, private readonly authObject: Auth, \n\n  otheruserbadges$(id: string) {\n    const docRef = doc(\n      this.firestore,\n      `badges/${id}`\n    ).withConverter<IBadges>({       //convert our firestore data into the IBadges type\n      fromFirestore: (snapshot) => {\n        return (snapshot.data() as IBadges);\n      },\n      toFirestore: (it: IBadges) => it,\n    });\n    return docData(docRef, { idField: 'id' });\n  }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\n// import { AuthState } from './auth.state';\nimport { OtherUserBadgesApi } from './otheruserbadges.api';\nimport { OtherUserBadgesState } from './otheruserbadges.state';\n//import { BadgesService } from 'src/app/services/badges/badges.service';\n// import { AuthApi } from '../auth/auth.api';\n\n\n@NgModule({\n  imports: [CommonModule, NgxsModule.forFeature([OtherUserBadgesState])],\n  providers: [OtherUserBadgesApi]\n})\nexport class OtherUserBadgesModule {}","import { Injectable } from '@angular/core';\nimport { User } from '@angular/fire/auth';\nimport { Action, Selector, State, StateContext, Store } from '@ngxs/store';\nimport { Navigate } from '@ngxs/router-plugin';\n\nimport { OtherUserBadgesApi } from './otheruserbadges.api';\n\nimport produce from 'immer';\nimport { Observable, tap } from 'rxjs';\nimport { IBadges } from 'src/app/models/badges.model';\nimport { SetOtherUserBadges, SubscribeToOtherUserBadges } from 'src/app/actions/otheruserbadges.actions';\n\nexport interface OtherUserBadgesStateModel {\n  //currUser: User | null;\n  currBadges: IBadges | null | undefined;\n}\n\n\n\n@State<OtherUserBadgesStateModel>({\n  name: 'otheruserbadges',\n  defaults: {\n    currBadges: null\n  }\n})\n@Injectable()\nexport class OtherUserBadgesState {\n  constructor(private readonly otherUserBadgesApi: OtherUserBadgesApi, private readonly store: Store) { }\n\n  @Selector()\n  static receivedBadges(state: OtherUserBadgesStateModel) {\n    return state.currBadges?.receivedBadges;\n  }\n\n  @Selector()\n  static currBadges(state: OtherUserBadgesStateModel) {\n    return state.currBadges;\n  }\n\n  @Action(SubscribeToOtherUserBadges)\n  public subscribeToOtherUserBadgesState(context: StateContext<OtherUserBadgesStateModel>) {\n    return this.otherUserBadgesApi.otheruserbadges$(\"FAsfcbCr1PZxDrvFrg2LSFFYu942\").pipe(\n      tap((currBadges: IBadges) => {\n        console.log(\"IN SubscribeToOtherUserBadges\");\n        console.log(currBadges);\n        context.dispatch(new SetOtherUserBadges(currBadges));\n      })\n    );\n  }\n\n  @Action(SetOtherUserBadges)\n  async setSubscribeToOtherUserBadges(context: StateContext<OtherUserBadgesStateModel>, { otherUserBadges }: SetOtherUserBadges) {\n    return context.setState(\n      produce((repr) => {\n        repr.currBadges = otherUserBadges;\n      })\n    );\n  }\n}\n"],"names":["SubscribeToOtherUserBadges","type","SetOtherUserBadges","constructor","otherUserBadges","BadgeComponent","ngOnInit","selectors","inputs","name","receivedDescription","notReceivedDescription","received","decls","vars","consts","template","BadgeComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵpureFunction2","_c0","ɵɵadvance","ɵɵtextInterpolate","RouterModule","OtherUserBadgesPage","routes","path","component","OtherUserBadgesPageRoutingModule","forChild","imports","i1","exports","CommonModule","FormsModule","IonicModule","OtherUserBadgesModule","OtherUserBadgesStatesModule","OtherUserBadgesApi","AuthApi","OtherUserBadgesPageModule","declarations","map","Select","OtherUserBadgesState","badge_r1","header","authApi","badgesService","store","badges","dispatch","receivedBadges$","pipe","receivedBadges","subscribe","forEach","badgeNumber","valueOf","console","log","ɵɵdirectiveInject","i2","BadgesService","i3","Store","OtherUserBadgesPage_Template","ɵɵtemplate","OtherUserBadgesPage_badge_7_Template","__decorate","currBadges","doc","docData","Nav","firestore","otheruserbadges$","id","docRef","withConverter","fromFirestore","snapshot","data","toFirestore","it","idField","ɵɵinject","NavController","Firestore","factory","ɵfac","NgxsModule","forFeature","ɵNgxsFeatureModule","Action","Selector","State","produce","tap","_class","otherUserBadgesApi","state","subscribeToOtherUserBadgesState","context","setSubscribeToOtherUserBadges","_asyncToGenerator","setState","repr","defaults"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}